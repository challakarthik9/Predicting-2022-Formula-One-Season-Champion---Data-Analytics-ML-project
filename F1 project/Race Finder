{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Race Finder","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPKSfpoXwhn24HpkS/3w4L4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt \n","from sklearn.model_selection import train_test_split\n","\n","pd.set_option('display.max_rows',30)\n","pd.set_option('display.max_columns', None)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-hCzyrq6XmM3","executionInfo":{"status":"ok","timestamp":1650942355332,"user_tz":240,"elapsed":17126,"user":{"displayName":"Mehmet İnan","userId":"08992617967511172155"}},"outputId":"d498c849-7805-4484-e34d-f27a6819782b"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":2,"metadata":{"id":"UAA7D8dhXXtZ","executionInfo":{"status":"ok","timestamp":1650942356229,"user_tz":240,"elapsed":902,"user":{"displayName":"Mehmet İnan","userId":"08992617967511172155"}}},"outputs":[],"source":["circuits = pd.read_csv(\"/content/drive/MyDrive/IEOR 4523 Team Project /F1/circuits.csv\")\n","races = pd.read_csv(\"/content/drive/MyDrive/IEOR 4523 Team Project /F1/races.csv\")\n","results = pd.read_csv(\"/content/drive/MyDrive/IEOR 4523 Team Project /F1/results.csv\")\n"]},{"cell_type":"code","source":["df_0 = pd.merge(circuits,races,on=['circuitId'])\n","df_0=df_0[['circuitId','name_x','raceId','date']]\n","df_0.rename(columns = {'name_x':'name'}, inplace = True)\n","df_1=pd.merge(df_0,results, on=['raceId'])\n","df_1=df_1[['name','raceId','circuitId','date','milliseconds']]\n","from datetime import datetime\n","df_1['date']=df_1['date'].apply(lambda x: datetime.strptime(x,\"%Y-%m-%d\"))\n","df_1=df_1[df_1['milliseconds']!='\\\\N']\n","df_1['milliseconds']=df_1['milliseconds'].astype(int)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l8M1eFcrXkNf","executionInfo":{"status":"ok","timestamp":1650942356581,"user_tz":240,"elapsed":354,"user":{"displayName":"Mehmet İnan","userId":"08992617967511172155"}},"outputId":"4b94a24a-440c-4d5b-82a1-d3b544b2db5d"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  if __name__ == '__main__':\n"]}]},{"cell_type":"code","source":["def trackDefiner(x):\n","    if (x<q1): return 1#fastest\n","    if (q1<x<=q2):return 2  #fast\n","    if (q2<x<=q3):return 3 #medium\n","    if (q3<x<=q4):return 4 #slow\n","    if (q4<x):return 5 #slowest"],"metadata":{"id":"2NKQcKSZZqkW","executionInfo":{"status":"ok","timestamp":1650942368024,"user_tz":240,"elapsed":140,"user":{"displayName":"Mehmet İnan","userId":"08992617967511172155"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["def raceLabeler(df,datecolumn,millisecondscolumn):\n","  df=df[df[millisecondscolumn]!='\\\\N']\n","  df[millisecondscolumn]=df[millisecondscolumn].astype(int)\n","  df=df[df[millisecondscolumn]<df[millisecondscolumn].quantile(0.99)] #eliminate outliers \n","  df_new=pd.DataFrame()\n","  df_new['time']=df.groupby('raceId')[millisecondscolumn].nsmallest(10).groupby('raceId').mean()\n","  q1=df_new['time'].quantile(q=0.2)\n","  q2=df_new['time'].quantile(q=0.4)\n","  q3=df_new['time'].quantile(q=0.6)\n","  q4=df_new['time'].quantile(q=0.8)\n","  def trackDefiner(x):\n","      if (x<q1): return 1#fastest\n","      if (q1<x<=q2):return 2  #fast\n","      if (q2<x<=q3):return 3 #medium\n","      if (q3<x<=q4):return 4 #slow\n","      if (q4<x):return 5 #slowest\n","  df['race_type']=df[millisecondscolumn].apply(lambda x:trackDefiner(x))\n","  return df\n","\n"],"metadata":{"id":"wgDnYSUu_yA7","executionInfo":{"status":"ok","timestamp":1650942413070,"user_tz":240,"elapsed":141,"user":{"displayName":"Mehmet İnan","userId":"08992617967511172155"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["df_4=raceLabeler(df_1,'date','milliseconds')\n","df_4['race_type'].hist(bins=5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"5FPCKbhhDCUU","executionInfo":{"status":"ok","timestamp":1650942414760,"user_tz":240,"elapsed":793,"user":{"displayName":"Mehmet İnan","userId":"08992617967511172155"}},"outputId":"2bd0bd25-d0a9-4a3e-8ade-eb818d134556"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fe2273375d0>"]},"metadata":{},"execution_count":7},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["df_5=raceLabeler(df_2,'date','milliseconds')\n","df_5['race_type'].hist(bins=5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":186},"id":"2peAKdCQFkXR","executionInfo":{"status":"error","timestamp":1650942704711,"user_tz":240,"elapsed":157,"user":{"displayName":"Mehmet İnan","userId":"08992617967511172155"}},"outputId":"d77122ce-85c6-4010-84f2-ec20e98c9dbe"},"execution_count":8,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-4d540178aafa>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf_5\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mraceLabeler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'date'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'milliseconds'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdf_5\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'race_type'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'df_2' is not defined"]}]},{"cell_type":"code","source":["status"],"metadata":{"id":"Ar-k8szY2npv","executionInfo":{"status":"error","timestamp":1650942708315,"user_tz":240,"elapsed":142,"user":{"displayName":"Mehmet İnan","userId":"08992617967511172155"}},"outputId":"a3c79cca-9497-4b22-d1df-1381578c102b","colab":{"base_uri":"https://localhost:8080/","height":168}},"execution_count":9,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-3d633e692314>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mstatus\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'status' is not defined"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"GkKMM5t72ohF"},"execution_count":null,"outputs":[]}]}