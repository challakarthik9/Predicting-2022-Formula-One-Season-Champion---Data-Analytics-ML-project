{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Race Type Finder","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt \n","from sklearn.model_selection import train_test_split\n","\n","pd.set_option('display.max_rows',30)\n","pd.set_option('display.max_columns', None)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-hCzyrq6XmM3","executionInfo":{"status":"ok","timestamp":1650946418994,"user_tz":240,"elapsed":15483,"user":{"displayName":"Mehmet Ä°nan","userId":"08992617967511172155"}},"outputId":"1ccc4947-66a8-4599-b621-a8e4d5cabb47"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UAA7D8dhXXtZ"},"outputs":[],"source":["circuits = pd.read_csv(\"/content/drive/MyDrive/IEOR 4523 Team Project /F1/circuits.csv\")\n","races = pd.read_csv(\"/content/drive/MyDrive/IEOR 4523 Team Project /F1/races.csv\")\n","results = pd.read_csv(\"/content/drive/MyDrive/IEOR 4523 Team Project /F1/results.csv\")\n","status = pd.read_csv(\"/content/drive/MyDrive/IEOR 4523 Team Project /F1/status.csv\")\n"]},{"cell_type":"code","source":["def idChanger(df,columnname): #use 'constructorId' in columnname\n","  def idChange(x):\n","    if (x==2 or x==51 or x==251 or x==15): return 8 #romeo\n","    if x== 6:return 2 #ferrari \n","    if (x==18 or x==5 or x==213):return 6  #alphatauri\n","    if x==1:return 5 #mclaren\n","    if (x==131 or x==25 or x==16 or x==11 or x==23):return 1 \n","    if (x==210 or x==166 or x==206 or x==209 or x==21 or x==29):return 10 #haas\n","    if x==3: return 9 #williams\n","    if (x==24 or x==19 or x==9 ):return 3  #redbull\n","    if (x==53 or x==42 or x==208 or x==4 or x==214 or x==22 ):return 4 #alpine\n","    if (x==17 or x==13 or x==12 or x==205 or x==117 or x==211 or x==10):return 7 #aston\n","\n","  df['newId']=df[columnname].apply(lambda x:idChange(x))\n","  \n","  return df"],"metadata":{"id":"n4HUb5ylnwks"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def raceLengthLabeler(df,raceidcolumn,millisecondscolumn):\n","  df=df[df[millisecondscolumn]!='\\\\N']\n","  df[millisecondscolumn]=df[millisecondscolumn].astype(int)\n","  df=df[df[millisecondscolumn]<df[millisecondscolumn].quantile(0.99)] #eliminate outliers \n","  df_new=pd.DataFrame()\n","  df_new['time']=df.groupby(raceidcolumn)[millisecondscolumn].nsmallest(10).groupby('raceId').mean()\n","  q1=df_new['time'].quantile(q=0.2)\n","  q2=df_new['time'].quantile(q=0.4)\n","  q3=df_new['time'].quantile(q=0.6)\n","  q4=df_new['time'].quantile(q=0.8)\n","  def trackLengthDefiner(x):\n","      if (x<q1): return 1#fastest\n","      if (q1<x<=q2):return 2  #fast\n","      if (q2<x<=q3):return 3 #medium\n","      if (q3<x<=q4):return 4 #slow\n","      if (q4<x):return 5 #slowest\n","  df['race_type']=df[millisecondscolumn].apply(lambda x:trackLengthDefiner(x))\n","  return df\n","\n"],"metadata":{"id":"wgDnYSUu_yA7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def importantRaceLabeler(df,circuitidcolumn):\n","  def importantTypeDefiner(x):\n","      if (x==1 or x==14 or x==21 or x==18 or x==3 or x==4 or x==6 or x==13 or x==10 or x==11 or x==15 or x==20 or x==22 or x==70 or x==24  or x==9 or x==4): return 1#important race\n","      else: return 0 #others\n","  df['important_race']=df[raceidcolumn].apply(lambda x:importantTypeDefiner(x))\n","  return df\n"],"metadata":{"id":"OinvuavAFHjw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def downforceRaceLabeler(df,circuitidcolumn):\n","  def downforceTypeDefiner(x):\n","      if (x==6 or x==11 or x==21 or x==15 or x==4 or x==71): return 1 #downforce race\n","      else: return 0 #others\n","  df['downforce_race']=df[circuitidcolumn].apply(lambda x:downforceTypeDefiner(x))\n","  return df"],"metadata":{"id":"eTrGQH6wIO0k"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def mixedRaceLabeler(df,circuitidcolumn):\n","  def mixedTypeDefiner(x):\n","      if (x==9 or x==13 or x==32 or x==22 or x==1): return 1#mixed race\n","      else: return 0 #others\n","  df['downforce_race']=df[circuitidcolumn].apply(lambda x:mixedTypeDefiner(x))\n","  return df"],"metadata":{"id":"hTk8Xz5eNbna"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def motorRaceLabeler(df,circuitidcolumn):\n","  def motorTypeDefiner(x):\n","      if (x==14 or x==73 or x==69 or x==8 or x==34 or x==70 or x==18 or x==24 or x==10 or x==3): return 1#mixed race\n","      else: return 0 #others\n","  df['downforce_race']=df[circuitidcolumn].apply(lambda x:motorTypeDefiner(x))\n","  return df"],"metadata":{"id":"j872J9JLNvoX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def constructorFaultLabeler(df,statuscolumn):\n","  def constructorFaultDefiner(x):\n","    temp=[5,6,7,8,9,10,21,22,23,24,25,26,27,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,51,54,56,129,60,63,64,65,66,67,68,69,70,\n","          71,75,76,79,80,83,84,85,86,87,89,91,92,93,94,95,98,99,101,102,103,105,106,107,108,109,110,121,126,131,132,135,136,138]\n","    if x in temp: return 1\n","    else: return 0 #others\n","  df['driver_finish']=df[statuscolumn].apply(lambda x:constructorFaultDefiner(x))\n","  return df"],"metadata":{"id":"2fRfbh7tfySq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def driverFaultLabeler(df,statuscolumn):\n","  def driverFaultDefiner(x):\n","    temp=[2,3,4,19,29,59,27,62,73,77,78,81,82,90,96,97,100,104,130,137,139]\n","    if x in temp: return 1\n","    else: return 0 #others\n","  df['driver_finish']=df[statuscolumn].apply(lambda x:driverFaultDefiner(x))\n","  return df"],"metadata":{"id":"xkNEHLQ1fgfN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def driverFinishLabeler(df,statuscolumn):\n","  def driverFinishDefiner(x):\n","    temp=[1,11,12,13,14,15,16,17,18,19,45,50,128,53,55,58,88,111,112,113,114,115,116,117,118,119,120,122,123,124,125,127,133,134]\n","    if x in temp: return 1\n","    else: return 0 #others\n","  df['driver_finish']=df[statuscolumn].apply(lambda x:driverFinishDefiner(x))\n","  return df"],"metadata":{"id":"z-LWYzX5dw7-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def ferrariDominationLabeler(df,datecolumnname): \n","  def ferrariDominationDefiner(x):\n","    if (1999<=x<=2004) : return 1\n","    else: return 0\n","\n","  df['ferrari_domination']=df[datecolumnname].apply(lambda x:ferrariDominationDefiner(x.year))\n","  \n","  return df"],"metadata":{"id":"8UgTXE-LmVPq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def mercedesDominationLabeler(df,datecolumnname): \n","  def mercedesDominationDefiner(x):\n","    if (2014<=x<=2019) : return 1\n","    else: return 0\n","\n","  df['ferrari_domination']=df[datecolumnname].apply(lambda x:mercedesDominationDefiner(x.year))\n","  \n","  return df"],"metadata":{"id":"B4XAUS9LmW0d"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def redbullDominationLabeler(df,datecolumnname): \n","  def redbullDominationDefiner(x):\n","    if (2010<=x<=2013) : return 1\n","    else: return 0\n","\n","  df['ferrari_domination']=df[datecolumnname].apply(lambda x:redbullDominationDefiner(x.year))\n","  \n","  return df"],"metadata":{"id":"sMQ5lf3WmXlw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def mclarenDominationLabeler(df,datecolumnname): \n","  def mclarenDominationDefiner(x):\n","    if (1984<=x<=1991) : return 1\n","    else: return 0\n","\n","  df['ferrari_domination']=df[datecolumnname].apply(lambda x:mclarenDominationDefiner(x.year))\n","  \n","  return df"],"metadata":{"id":"4Re7uEXxmYS9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def williamsDominationLabeler(df,datecolumnname): \n","  def williamsDominationDefiner(x):\n","    if (1992<=x<=1997) : return 1\n","    else: return 0\n","\n","  df['ferrari_domination']=df[datecolumnname].apply(lambda x:williamsDominationDefiner(x.year))\n","  \n","  return df"],"metadata":{"id":"D8qqFarOhBQo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def nonDominationLabeler(df,datecolumnname): \n","  def nonDominationDefiner(x):\n","    if (2004<=x<=2008 or x<1984) : return 1\n","    else: return 0\n","\n","  df['ferrari_domination']=df[datecolumnname].apply(lambda x:nonDominationDefiner(x.year))\n","  \n","  return df"],"metadata":{"id":"pLXeYYtGnEMO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_0 = pd.merge(circuits,races,on=['circuitId'])\n","df_0=df_0[['circuitId','name_x','raceId','date']]\n","df_0.rename(columns = {'name_x':'name'}, inplace = True)\n","df_1=pd.merge(df_0,results, on=['raceId'])\n","df_1=df_1[['name','raceId','circuitId','date','milliseconds','statusId']]\n","from datetime import datetime\n","df_1['date']=df_1['date'].apply(lambda x: datetime.strptime(x,\"%Y-%m-%d\"))\n","temp_dict={}\n","for i in df_1['name'].unique():\n","  temp_list=[]\n","  for j in df_1[df_1['name']==i]['date'].unique():\n","    temp_list.append(pd.Timestamp(j).year)\n","  temp_dict[i]=temp_list\n","#temp_dict\n","#df_1=df_1[df_1['milliseconds']!='\\\\N']\n","#df_1['milliseconds']=df_1['milliseconds'].astype(int)\n","#df_1=df_1[df_1['milliseconds']<10800000]\n","#df_1.groupby('raceId')['milliseconds'].nsmallest(10).groupby('raceId').mean().hist(bins=1000) \n"],"metadata":{"id":"l8M1eFcrXkNf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[" df_2=df_1[df_1['date']>datetime.strptime('2000', \"%Y\")]\n"," df_2.groupby('raceId')['milliseconds'].nsmallest(10).groupby('raceId').mean().hist(bins=1000) "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":296},"id":"2NKQcKSZZqkW","executionInfo":{"status":"ok","timestamp":1650946453227,"user_tz":240,"elapsed":5133,"user":{"displayName":"Mehmet Ä°nan","userId":"08992617967511172155"}},"outputId":"c9001133-79bb-4eb4-a9ea-988e3539eba1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f6b08d71990>"]},"metadata":{},"execution_count":12},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["df_2=raceLengthLabeler(df_1,'raceId','milliseconds')\n","df_2['race_type'].hist(bins=5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"5FPCKbhhDCUU","executionInfo":{"status":"ok","timestamp":1650946492582,"user_tz":240,"elapsed":1494,"user":{"displayName":"Mehmet Ä°nan","userId":"08992617967511172155"}},"outputId":"8435e660-918c-4abc-bb03-f2d3a042dd5f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f6b08393550>"]},"metadata":{},"execution_count":17},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["'''\n","\n","1- use last 52 years date and try the model (1970)\n","2- increase max n from 7 to 10 or maybe 20\n","3- add variables about some races (maybe past performances in this radces) \n","4- add last n years performance in this track\n","5- eliminate grid position (keep it, at the end of today we will use it)\n","6- use the disqualifying data in last n years \n","\n","then \n","\n","1- use the data about whether the track is fast or etc. not and give a clasifier\n","2- use constructor rather than driver (we just need to sum every to rows and merge into one row)\n","3- use eras and make prediction for different eras \n","4- categorize disqualifying data\n","5- categorize races \n","\n","'''\n","\n","'''\n","Albert park - 1\n","1996'dan beri\n","\n","imola (Autodromo Enzo) - 56\n","80'den beri ama 2006-2019 yok\n","\n","monza hep var - 13\n","\n","meksika (AutÃ³dromo Hermanos RodrÃ­guez) - 32\n","86-92 vw 2015-2021\n","\n","Brezilya - 16\n","baya var \n","\n","Bahrain - 4\n","2004den beri\n","\n","montreal (Circuit Gilles Villeneuve) - 24\n","baya var \n","\n","catalunya - 5\n","baya var \n","\n","monaco - 6\n","baya var \n","\n","spa - 12\n","baya var \n","\n","americas - 69\n","2012'den beri\n","\n","Hockenheimring - 27\n","baya var ama 2002'den beri bak \n","Hockenheimring old \n","2002 Ã¶ncesi\n","\n","Hungaroring - 10\n","1990'dan beri var \n","\n","marina bay - 14\n","2009'dan beri\n","\n","NÃ¼rburgring - 9\n","2009'a kadar \n","\n","red bul ring 2014den beri - 70\n","\n","\n","sepand 99'dan veri - 2\n","\n","shangai - 3\n","2004'den beri\n","\n","silverstone - 8\n","hep\n","\n","sochi 2014'den beri - 70\n","\n","suzuka - 15\n","1990'dan beri\n","\n","yas marina 2009'dan beri - 17\n","\n","'''\n","'''\n","1-11-12-13-14-15-16-17-18-19-45-50-128-53-55-58-88-111-112-113-114-115-116-117-118-119-120-122-123-124-125-127-133-134 #done \n","2-3-4-19-29-59-27-62-73-77-78-81-82-90-96-97-100-104-130-137-139 #driver\n","5-6-7-8-9-10-21-22-23-24-25-26-27-28-30-31-32-33-34-35-36-37-38-39-40-41-42-43-44-46-47-48-49-51-54-56-129-60-63-64-65-66-67-68-69-70\n","71-75-76-79-80-83-84-85-86-87-89-91-92-93-94-95-98-99-101-102-103-105-106-107-108-109-110-121-126-131-132-135-136-138\n","#team\n","'''\n","\n","'''\n","1- whether the race is important race DONE\n","2- whether the race is power or downforce or mixed track DONE\n","\n","3- whether the team disqualified because of driver/car or not\n","[1:42 AM, 4/25/2022] Mehmet Ä°nan: 4- dominant f1 eras\n","'''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":107},"id":"2peAKdCQFkXR","executionInfo":{"status":"ok","timestamp":1650947456625,"user_tz":240,"elapsed":135,"user":{"displayName":"Mehmet Ä°nan","userId":"08992617967511172155"}},"outputId":"3046f151-6041-4813-9d5f-a86ee89217f8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\nAlbert park - 1\\n1996'dan beri\\n\\nimola (Autodromo Enzo) - 56\\n80'den beri ama 2006-2019 yok\\n\\nmonza hep var - 13\\n\\nmeksika (AutÃ³dromo Hermanos RodrÃ­guez) - 32\\n86-92 vw 2015-2021\\n\\nBrezilya - 16\\nbaya var \\n\\nBahrain - 4\\n2004den beri\\n\\nmontreal (Circuit Gilles Villeneuve) - 24\\nbaya var \\n\\ncatalunya - 5\\nbaya var \\n\\nmonaco - 6\\nbaya var \\n\\nspa - 12\\nbaya var \\n\\namericas - 69\\n2012'den beri\\n\\nHockenheimring - 27\\nbaya var ama 2002'den beri bak \\nHockenheimring old \\n2002 Ã¶ncesi\\n\\nHungaroring - 10\\n1990'dan beri var \\n\\nmarina bay - 14\\n2009'dan beri\\n\\nNÃ¼rburgring - 9\\n2009'a kadar \\n\\nred bul ring 2014den beri - 70\\n\\n\\nsepand 99'dan veri - 2\\n\\nshangai - 3\\n2004'den beri\\n\\nsilverstone - 8\\nhep\\n\\nsochi 2014'den beri - 70\\n\\nsuzuka - 15\\n1990'dan beri\\n\\nyas marina 2009'dan beri - 17\\n\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":[""],"metadata":{"id":"df0smtSioSwa"},"execution_count":null,"outputs":[]}]}